{
  "config": {
    "flow_title": "{name} ({manufacturer} {model})",
    "abort": {
      "already_configured": "Sensor is already configured, specify a unique_id"
    },
    "step": {
      "user": {
        "title": "Choose your sensor type",
        "data": {
          "sensor_type": "Sensor type"
        }
      },
      "daily_energy": {
        "title": "Create a daily fixed sensor",
        "data": {
          "name": "[%key:common::config_flow::data::name%]",
          "unique_id": "Unique id",
          "value": "Value",
          "value_template": "Value template",
          "on_time": "On time",
          "start_time": "Start time",
          "unit_of_measurement": "Unit of measurement",
          "update_frequency": "Update frequency"
        },
        "data_description": {
          "on_time": "When left empty defaults to 1 day. always on",
          "update_frequency": "time in seconds between state updates of the sensor"
        }
      },
      "group": {
        "title": "Create a group sensor",
        "data": {
          "name": "[%key:common::config_flow::data::name%]",
          "unique_id": "Unique id",
          "group_member_sensors": "Member powercalc sensors",
          "group_power_entities": "Additional power entities",
          "group_energy_entities": "Additional energy entities",
          "sub_groups": "Sub groups",
          "hide_members": "Hide members",
          "create_utility_meters": "[%key:component::powercalc::config::step::virtual_power::data::create_utility_meters%]"
        },
        "data_description": {
          "group_member_sensors": "Powercalc sensors to include in the group",
          "group_power_entities": "Additional power sensors (W) from your HA installation to include",
          "group_energy_entities": "Additional energy sensors (kWh) from your HA installation to include",
          "sub_groups": "All containing sensors from the selected subgroups will be added to this group as well"
        }
      },
      "virtual_power": {
        "title": "Create a virtual power sensor",
        "description": "See the readme for more information about the possible strategies and configuration options",
        "data": {
          "name": "[%key:common::config_flow::data::name%]",
          "mode": "Calculation strategy",
          "entity_id": "Source entity",
          "unique_id": "Unique id",
          "group": "Add to group",
          "standby_power": "Standby power",
          "create_energy_sensor": "Create energy sensor",
          "create_utility_meters": "Create utility meters"
        },
        "data_description": {
          "entity_id": "entity the virtual power is based on, the power sensor will listen to state changes of this entity to be updated",
          "unique_id": "Specify a unique_id. This will allow to setup multiple power sensors for the same entity. When not specified it will take the unique_id of the source entity",
          "name": "Leaving blank will take the name from the source entity",
          "standby_power": "Define the amount of power the device is consuming when in an OFF state",
          "create_energy_sensor": "Whether powercalc needs to create a kWh sensor",
          "create_utility_meters": "Let powercalc create utility meters, which cycle daily, hourly etc."
        }
      },
      "fixed": {
        "title": "Fixed config",
        "description": "Define a fixed power value for your entity. Alternatively you can define a power value per state. For example:\n\n`playing: 8.3`\n`paused: 2.25`",
        "data": {
          "power": "Power",
          "power_template": "Power template",
          "states_power": "States power"
        },
        "data_description": {
          "power": "A fixed power value in Watts when the entity is ON",
          "power_template": "Template will be evaluated to get the power value in W",
          "states_power": "One 'state: power' pair on each row, see example above"
        }
      },
      "linear": {
        "title": "Linear config",
        "data": {
          "calibrate": "Calibration values",
          "min_power": "Min power",
          "max_power": "Max power",
          "gamma_curve": "Gamma curve",
          "attribute": "Attribute"
        },
        "data_description": {
          "calibrate": "Put a calibration value on each line. Example\n\n1: 20",
          "attribute": "Specify the attribute. When left empty will be brightness for lights and percentage for fans"
        }
      },
      "wled": {
        "title": "WLED config",
        "data": {
          "voltage": "Voltage",
          "power_factor": "Power factor"
        }
      },
      "library": {
        "title": "Library",
        "description": "Manufacturer '{manufacturer}' and model '{model}' were automatically detected for your device.{remarks}",
        "data": {
          "confirm_autodisovered_model": "Confirm model"
        },
        "data_description": {
          "confirm_autodisovered_model": "If you choose not to confirm, you can input the manufacturer and model yourself"
        }
      },
      "manufacturer": {
        "title": "Manufacturer",
        "description": "Select the device manufacturer",
        "data": {
          "manufacturer": "Manufacturer"
        }
      },
      "model": {
        "title": "Model",
        "description": "Select the device model. See the [list]({supported_models_link}) of supported models for more information",
        "data": {
          "model": "Model ID"
        }
      },
      "sub_profile": {
        "title": "Sub profile",
        "description": "This model has multiple sub profiles. Select one that suites your device",
        "data": {
          "sub_profile": "Sub profile"
        }
      },
      "power_advanced": {
        "title": "Advanced options",
        "description": "The options below are for advanced powercalc configuration. Most users will not use this so you may skip these",
        "data": {
          "calculation_enabled_condition": "Calculation enabled condition",
          "energy_integration_method": "Energy integration method",
          "ignore_unavailable_state": "Ignore unavailable state",
          "multiply_factor": "Multiply factor",
          "unavailable_power": "Unavailable power"
        },
        "data_description": {
          "calculation_enabled_condition": "The configured power calculation strategy will only be executed when this template evaluates to true or 1, otherwise the power sensor will display 0",
          "ignore_unavailable_state": "Toggle this setting when you want the power sensor to stay available even if the source entity is unavailable",
          "multiply_factor": "Multiplies the calculated power by this ratio. Can be useful for light groups",
          "unavailable_power": "Power in W to record when the source entity has an unavailable state"
        }
      }
    },
    "error": {
      "linear_mandatory": "You must supply at least one of max_power or calibrate",
      "linear_unsupported_domain": "Entity domain not supported for linear mode. Must be one of: fan, light or mediaplayer. You can use the calibrate option however",
      "linear_min_higher_as_max": "Max power cannot be lower than min power",
      "daily_energy_mandatory": "You must supply at least one of Value or Value template",
      "fixed_mandatory": "You must supply at least one of Power, Power template or States power",
      "fixed_states_power_only": "This entity can only work with 'states_power' not 'power'",
      "group_mandatory": "You must define at least subgroups or power and energy-entities",
      "lut_unsupported_color_mode": "The LUT profile does not support one of the color modes of your light. See the logs for more info",
      "lut_wrong_domain": "Only light entities can use the LUT mode",
      "unknown": "Unknown error occured, please see the logs for additional information"
    }
  },
  "options": {
    "step": {
      "init": {
        "data": {
          "value": "[%key:component::powercalc::config::step::daily_energy::data::value%]",
          "unit_of_measurement": "[%key:component::powercalc::config::step::daily_energy::data::unit_of_measurement%]",
          "update_frequency": "[%key:component::powercalc::config::step::daily_energy::data::update_frequency%]",
          "name": "[%key:component::powercalc::config::step::daily_energy::data::name%]",
          "on_time": "[%key:component::powercalc::config::step::daily_energy::data::on_time%]",
          "value_template": "[%key:component::powercalc::config::step::daily_energy::data::value_template%]",
          "standby_power": "[%key:component::powercalc::config::step::virtual_power::data::standby_power%]",
          "calculation_enabled_condition": "[%key:component::powercalc::config::step::power_advanced::data::calculation_enabled_condition%]",
          "create_energy_sensor": "[%key:component::powercalc::config::step::virtual_power::data::create_energy_sensor%]",
          "create_utility_meters": "[%key:component::powercalc::config::step::virtual_power::data::create_utility_meters%]",
          "power": "[%key:component::powercalc::config::step::fixed::data::power%]",
          "power_template": "[%key:component::powercalc::config::step::fixed::data::power_template%]",
          "states_power": "[%key:component::powercalc::config::step::fixed::data::states_power%]",
          "calibrate": "[%key:component::powercalc::config::step::linear::data::calibrate%]",
          "min_power": "[%key:component::powercalc::config::step::linear::data::min_power%]",
          "max_power": "[%key:component::powercalc::config::step::linear::data::max_power%]",
          "gamma_curve": "[%key:component::powercalc::config::step::linear::data::gamma_curve%]",
          "attribute": "[%key:component::powercalc::config::step::linear::data::attribute%]",
          "group_member_sensors": "[%key:component::powercalc::config::step::group::data::group_member_sensors%]",
          "group_power_entities": "[%key:component::powercalc::config::step::group::data::group_power_entities%]",
          "group_energy_entities": "[%key:component::powercalc::config::step::group::data::group_energy_entities%]",
          "sub_groups": "[%key:component::powercalc::config::step::group::data::sub_groups%]",
          "hide_members": "[%key:component::powercalc::config::step::group::data::hide_members%]",
          "energy_integration_method": "[%key:component::powercalc::config::step::power_advanced::data::energy_integration_method%]",
          "ignore_unavailable_state": "[%key:component::powercalc::config::step::power_advanced::data::ignore_unavailable_state%]",
          "multiply_factor": "[%key:component::powercalc::config::step::power_advanced::data::multiply_factor%]",
          "unavailable_power": "[%key:component::powercalc::config::step::power_advanced::data::unavailable_power%]"
        },
        "data_description": {
          "calculation_enabled_condition": "[%key:component::powercalc::config::step::power_advanced::data_description::calculation_enabled_condition%]",
          "calibrate": "[%key:component::powercalc::config::step::linear::data_description::calibrate%]",
          "attribute": "[%key:component::powercalc::config::step::linear::data_description::attribute%]",
          "power_template": "[%key:component::powercalc::config::step::fixed::data_description::power_template%]",
          "states_power": "[%key:component::powercalc::config::step::fixed::data_description::states_power%]",
          "sub_groups": "[%key:component::powercalc::config::step::group::data_description::sub_groups%]",
          "group_member_sensors": "[%key:component::powercalc::config::step::group::data_description::group_member_sensors%]",
          "group_power_entities": "[%key:component::powercalc::config::step::group::data_description::group_power_entities%]",
          "group_energy_entities": "[%key:component::powercalc::config::step::group::data_description::group_energy_entities%]",
          "ignore_unavailable_state": "[%key:component::powercalc::config::step::power_advanced::data_description::ignore_unavailable_state%]",
          "multiply_factor": "[%key:component::powercalc::config::step::power_advanced::data_description::multiply_factor%]",
          "unavailable_power": "[%key:component::powercalc::config::step::power_advanced::data_description::unavailable_power%]"
        }
      }
    },
    "error": {
      "linear_mandatory": "[%key:component::powercalc::config::error::linear_mandatory%]",
      "linear_unsupported_domain": "[%key:component::powercalc::config::error::linear_unsupported_domain%]",
      "linear_min_higher_as_max": "[%key:component::powercalc::config::error::linear_min_higher_as_max%]",
      "fixed_mandatory": "[%key:component::powercalc::config::error::fixed_mandatory%]",
      "fixed_states_power_only": "[%key:component::powercalc::config::error::fixed_states_power_only%]",
      "group_mandatory": "[%key:component::powercalc::config::error::group_mandatory%]",
      "unknown": "[%key:component::powercalc::config::error::unknown%]"
    }
  }
}
