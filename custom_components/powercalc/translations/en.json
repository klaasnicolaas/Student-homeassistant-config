{
  "common": {
    "remarks_smart_switch": "This profile only provides standby power values. \n When you have an appliance which consumes a fixed amount of power when turned on, you can provide that value in next step of the config flow"
  },
  "config": {
    "abort": {
      "already_configured": "Sensor is already configured, specify a unique_id"
    },
    "error": {
      "daily_energy_mandatory": "You must supply at least one of Value or Value template",
      "entity_mandatory": "Selecting an entity is required for any strategy other than playbook",
      "fixed_mandatory": "You must supply at least one of Power, Power template or States power",
      "fixed_states_power_only": "This entity can only work with 'states_power' not 'power'",
      "group_mandatory": "You must define at least subgroups or power and energy-entities",
      "linear_mandatory": "You must supply at least one of max_power or calibrate",
      "linear_min_higher_as_max": "Max power cannot be lower than min power",
      "linear_unsupported_domain": "Entity domain not supported for linear mode. Must be one of: fan, light or mediaplayer. You can use the calibrate option however",
      "lut_unsupported_color_mode": "The LUT profile does not support one of the color modes of your light. See the logs for more info",
      "lut_wrong_domain": "Only light entities can use the LUT mode",
      "playbook_mandatory": "You need to specify at least one playbook",
      "unknown": "Unknown error occured, please see the logs for additional information"
    },
    "flow_title": "{name} ({manufacturer} {model})",
    "step": {
      "daily_energy": {
        "data": {
          "create_utility_meters": "Create utility meters",
          "group": "Add to group",
          "name": "Name",
          "on_time": "On time",
          "start_time": "Start time",
          "unique_id": "Unique id",
          "unit_of_measurement": "Unit of measurement",
          "update_frequency": "Update frequency",
          "value": "Value",
          "value_template": "Value template"
        },
        "data_description": {
          "group": "Fill in a custom group name to create a new group",
          "on_time": "When left empty defaults to 1 day. always on",
          "update_frequency": "time in seconds between state updates of the sensor"
        },
        "title": "Create a daily fixed sensor"
      },
      "domain_group": {
        "data": {
          "name": "Name",
          "create_energy_sensor": "Create energy sensor",
          "create_utility_meters": "Create utility meters",
          "domain": "Entity domain",
          "exclude_entities": "Exclude entities"
        },
        "title": "Create a domain based group sensor"
      },
      "fixed": {
        "data": {
          "power": "Power",
          "power_template": "Power template",
          "states_power": "States power"
        },
        "data_description": {
          "power": "A fixed power value in Watts when the entity is ON",
          "power_template": "Template will be evaluated to get the power value in W",
          "states_power": "One 'state: power' pair on each row, see example above"
        },
        "description": "Define a fixed power value for your entity. Alternatively you can define a power value per state. For example:\n\n`playing: 8.3`\n`paused: 2.25`",
        "title": "Fixed config"
      },
      "global_configuration": {
        "title": "Global configuration",
        "description": "Setup global configuration for Powercalc. For more information see the [documentation](https://docs.powercalc.nl/configuration/global-configuration/). Additional options for energy sensors and utility meters can be provided in the next steps.",
        "data": {
          "create_energy_sensors": "Create energy sensors",
          "create_utility_meters": "Create utility meters",
          "disable_extended_attributes": "Disable extended attributes",
          "disable_library_download": "Disable remote library download",
          "force_update_frequency": "Force update frequency",
          "ignore_unavailable_state": "Ignore unavailable state",
          "include_non_powercalc_sensors": "Include non powercalc sensors",
          "power_sensor_category": "Power sensor category",
          "power_sensor_friendly_naming": "Power sensor friendly name pattern",
          "power_sensor_naming": "Power sensor name pattern"
        },
        "data_description": {
          "create_energy_sensors": "Whether powercalc needs to create kWh sensors",
          "create_utility_meters": "Let powercalc create utility meters, which cycle daily, hourly etc.",
          "disable_extended_attributes": "Disable all extra attributes powercalc adds to the power, energy and group entity states. This will help keep the database size small",
          "disable_library_download": "Disable the Powercalc library download feature",
          "force_update_frequency": "Interval at which the sensor state is updated, even when the power value stays the same. In seconds",
          "ignore_unavailable_state": "Keep Powercalc sensors available, even when the source entity is unavailable",
          "include_non_powercalc_sensors": "Control whether you want to include non powercalc sensors in groups"
        }
      },
      "global_configuration_energy": {
        "title": "Energy options",
        "data": {
          "energy_integration_method": "Energy integration method",
          "energy_sensor_category": "Energy sensor category",
          "energy_sensor_friendly_naming": "Energy sensor friendly name pattern",
          "energy_sensor_naming": "Energy sensor name pattern",
          "energy_sensor_precision": "Energy sensor precision",
          "energy_sensor_unit_prefix": "Energy sensor unit prefix"
        }
      },
      "global_configuration_utility_meter": {
        "title": "Utility meter options",
        "data": {
          "utility_meter_net_consumption": "Utility meter net consumption",
          "utility_meter_tariffs": "Utility meter tariffs",
          "utility_meter_types": "Utility meter types"
        }
      },
      "group": {
        "data": {
          "area": "Area",
          "create_energy_sensor": "Create energy sensor",
          "create_utility_meters": "Create utility meters",
          "device": "Device",
          "force_calculate_group_energy": "Force calculate energy",
          "group_energy_entities": "Additional energy entities",
          "group_member_sensors": "Member powercalc sensors",
          "group_power_entities": "Additional power entities",
          "hide_members": "Hide members",
          "include_non_powercalc_sensors": "Include non powercalc sensors",
          "name": "Name",
          "sub_groups": "Sub groups",
          "unique_id": "Unique id"
        },
        "data_description": {
          "area": "Adds all power sensors from the specified area",
          "create_energy_sensor": "Whether powercalc needs to create a kWh sensor",
          "device": "Add the group entities powercalc creates to an existing device",
          "force_calculate_group_energy": "By default powercalc sums the energy sensors from the member sensors. Toggle this option to force creating a Riemann Sum sensor",
          "group_energy_entities": "Additional energy sensors (kWh) from your HA installation to include",
          "group_member_sensors": "Powercalc sensors to include in the group",
          "group_power_entities": "Additional power sensors (W) from your HA installation to include",
          "include_non_powercalc_sensors": "Control whether to include non powercalc sensors when using the area option",
          "sub_groups": "All containing sensors from the selected subgroups will be added to this group as well"
        },
        "title": "Create a group sensor"
      },
      "library": {
        "data": {
          "confirm_autodisovered_model": "Confirm model"
        },
        "data_description": {
          "confirm_autodisovered_model": "If you choose not to confirm, you can input the manufacturer and model yourself"
        },
        "description": "Manufacturer \"{manufacturer}\" and model \"{model}\" were automatically detected for your device.{remarks}",
        "title": "Library"
      },
      "linear": {
        "data": {
          "attribute": "Attribute",
          "calibrate": "Calibration values",
          "gamma_curve": "Gamma curve",
          "max_power": "Max power",
          "min_power": "Min power"
        },
        "data_description": {
          "attribute": "Specify the attribute. When left empty will be brightness for lights and percentage for fans",
          "calibrate": "Put a calibration value on each line. Example\n\n1: 20"
        },
        "title": "Linear config"
      },
      "manufacturer": {
        "data": {
          "manufacturer": "Manufacturer"
        },
        "description": "Select the device manufacturer",
        "title": "Manufacturer config"
      },
      "model": {
        "data": {
          "model": "Model ID"
        },
        "description": "Select the device model. See the [list]({supported_models_link}) of supported models for more information",
        "title": "Model config"
      },
      "menu_group": {
        "menu_options": {
          "group": "Standard group",
          "domain_group": "Domain based group"
        },
        "title": "Choose the group type",
        "description": "Select the type of group sensor you want to create. Choose domain based group if you want to group all entities of a specific domain, or create a sensor summing all your energy sensor. Choose standard group otherwise"
      },
      "multi_switch": {
        "data": {
          "entities": "Switch entities",
          "power": "Power ON",
          "power_off": "Power OFF"
        },
        "data_description": {
          "entities": "Select all the individual switches that are part of the multi switch",
          "power": "Power for a single switch when turned on",
          "power_off": "Power for a single switch when turned off"
        },
        "title": "Multi switch config"
      },
      "playbook": {
        "data": {
          "autostart": "Autostart",
          "playbooks": "Playbooks",
          "repeat": "Repeat",
          "states_trigger": "State trigger"
        },
        "data_description": {
          "autostart": "Indicate to start a certain playbook when HA starts. i.e. 'program1'",
          "playbooks": "Enter a playbook on each line. Example\n\nprogram1: washing_machine/program1.csv",
          "repeat": "Toggle when you want to keep repeating the playbook after it completes",
          "states_trigger": "Trigger a playbook based on a state change. Example\n\nplaying: program1"
        },
        "title": "Playbook config"
      },
      "power_advanced": {
        "data": {
          "calculation_enabled_condition": "Calculation enabled condition",
          "energy_integration_method": "Energy integration method",
          "energy_sensor_unit_prefix": "Energy sensor unit prefix",
          "ignore_unavailable_state": "Ignore unavailable state",
          "multiply_factor": "Multiply factor",
          "multiply_factor_standby": "Multiply factor standby",
          "unavailable_power": "Unavailable power",
          "utility_meter_tariffs": "Utility meter tariffs"
        },
        "data_description": {
          "calculation_enabled_condition": "The configured power calculation strategy will only be executed when this template evaluates to true or 1, otherwise the power sensor will display 0",
          "ignore_unavailable_state": "Toggle this setting when you want the power sensor to stay available even if the source entity is unavailable",
          "multiply_factor": "Multiplies the calculated power by this ratio. Can be useful for light groups",
          "multiply_factor_standby": "Whether to also apply multiplication factor to standby power",
          "unavailable_power": "Power in W to record when the source entity has an unavailable state",
          "utility_meter_tariffs": "A list of supported tariffs, leave empty if only a single tariff is needed."
        },
        "description": "The options below are for advanced powercalc configuration. Most users will not use this so you may skip these",
        "title": "Advanced options"
      },
      "real_power": {
        "data": {
          "create_utility_meters": "Create utility meters",
          "entity_id": "Power sensor id",
          "name": "Name",
          "device": "Device"
        },
        "data_description": {
          "create_utility_meters": "Let powercalc create utility meters, which cycle daily, hourly etc.",
          "name": "Base name for the energy and utility meter. Full entity name will be set accordingly to energy_sensor_naming setting",
          "device": "Add the created energy sensor to an specific device"
        },
        "description": "Currently specific settings can only be configured globally",
        "title": "Create an energy sensor for an existing power sensor"
      },
      "subtract_group": {
        "data": {
          "create_energy_sensor": "Create energy sensor",
          "create_utility_meters": "Create utility meters",
          "entity_id": "Base entity",
          "name": "Name",
          "unique_id": "Unique id",
          "subtract_entities": "Subtract entities"
        },
        "data_description": {
          "entity_id": "The base entity to subtract the power from",
          "subtract_entities": "Select all the entities you want to subtract from the base entity"
        },
        "title": "Subtract group sensor"
      },
      "sub_profile": {
        "data": {
          "sub_profile": "Sub profile"
        },
        "description": "This model has multiple sub profiles. Select one that suites your device",
        "title": "Sub profile config"
      },
      "smart_switch": {
        "data": {
          "power": "Power",
          "self_usage_included": "Self usage included"
        },
        "data_description": {
          "power": "A fixed power value in Watts for the connected appliance",
          "self_usage_included": "Whether the power value includes the power consumed by the smart switch itself. When you omit it Powercalc will add the self usage of the smart switch to the power value, which is {self_usage_power}W"
        },
        "description": "Define the power consumption of the connected appliance. When it doesn't use a fixed amount of power you can skip this step. Powercalc will setup a power sensor for the self usage of the smart switch itself",
        "title": "Smart switch config"
      },
      "user": {
        "data": {
          "sensor_type": "Sensor type"
        },
        "menu_options": {
          "daily_energy": "Daily energy",
          "group": "Group",
          "menu_library": "Virtual power (library)",
          "real_power": "Energy from real power sensor",
          "virtual_power": "Virtual power (manual)"
        },
        "title": "Choose your sensor type"
      },
      "utility_meter_options": {
        "title": "Utility meter options",
        "description": "Define the settings for utility meter creation here",
        "data": {
          "utility_meter_net_consumption": "Net consumption",
          "utility_meter_types": "Cycles",
          "utility_meter_tariffs": "Tariffs"
        },
        "data_description": {
          "utility_meter_net_consumption": "Enable this if you would like to treat the source as a net meter. This will allow your counter to go both positive and negative.",
          "utility_meter_types": "Create utility meters for specified cycles",
          "utility_meter_tariffs": "A list of supported tariffs, leave empty if only a single tariff is needed."
        }
      },
      "virtual_power": {
        "data": {
          "create_energy_sensor": "Create energy sensor",
          "create_utility_meters": "Create utility meters",
          "entity_id": "Source entity",
          "group": "Add to group",
          "mode": "Calculation strategy",
          "name": "Name",
          "standby_power": "Standby power",
          "unique_id": "Unique id"
        },
        "data_description": {
          "create_energy_sensor": "Whether powercalc needs to create a kWh sensor",
          "create_utility_meters": "Let powercalc create utility meters, which cycle daily, hourly etc.",
          "entity_id": "entity the virtual power is based on, the power sensor will listen to state changes of this entity to be updated",
          "group": "Fill in a custom group name to create a new group",
          "name": "Leaving blank will take the name from the source entity",
          "standby_power": "Define the amount of power the device is consuming when in an OFF state",
          "unique_id": "Specify a unique_id. This will allow to setup multiple power sensors for the same entity. When not specified it will take the unique_id of the source entity"
        },
        "description": "See the readme for more information about the possible strategies and configuration options. Either source entity or name is required, or both.",
        "title": "Create a virtual power sensor"
      },
      "wled": {
        "data": {
          "power_factor": "Power factor",
          "voltage": "Voltage"
        },
        "description": "Make sure to enable brightness limiter in WLED software. Also see https://docs.powercalc.nl/strategies/wled/",
        "title": "WLED config"
      }
    }
  },
  "issues": {
    "deprecated_platform_yaml": {
      "description": "Configuring sensors using `sensor->platform` has been deprecated. You need to change your configuration to `powercalc->sensors`. Click on 'Learn more' for further instructions.",
      "title": "Powercalc YAML configuration has moved"
    }
  },
  "options": {
    "abort": {
      "model_not_support": "Model not supported"
    },
    "error": {
      "fixed_mandatory": "You must supply at least one of Power, Power template or States power",
      "fixed_states_power_only": "This entity can only work with 'states_power' not 'power'",
      "group_mandatory": "You must define at least subgroups or power and energy-entities",
      "linear_mandatory": "You must supply at least one of max_power or calibrate",
      "linear_min_higher_as_max": "Max power cannot be lower than min power",
      "linear_unsupported_domain": "Entity domain not supported for linear mode. Must be one of: fan, light or mediaplayer. You can use the calibrate option however",
      "unknown": "Unknown error occured, please see the logs for additional information"
    },
    "step": {
      "advanced_options": {
        "title": "Advanced options",
        "data": {
          "calculation_enabled_condition": "Calculation enabled condition",
          "energy_integration_method": "Energy integration method",
          "ignore_unavailable_state": "Ignore unavailable state",
          "multiply_factor": "Multiply factor",
          "multiply_factor_standby": "Multiply factor standby",
          "unavailable_power": "Unavailable power"
        },
        "data_description": {
          "calculation_enabled_condition": "The configured power calculation strategy will only be executed when this template evaluates to true or 1, otherwise the power sensor will display 0",
          "ignore_unavailable_state": "Toggle this setting when you want the power sensor to stay available even if the source entity is unavailable",
          "multiply_factor": "Multiplies the calculated power by this ratio. Can be useful for light groups",
          "multiply_factor_standby": "Whether to also apply multiplication factor to standby power",
          "unavailable_power": "Power in W to record when the source entity has an unavailable state"
        }
      },
      "basic_options": {
        "title": "Basic options",
        "data": {
          "create_energy_sensor": "Create energy sensor",
          "create_utility_meters": "Create utility meters",
          "entity_id": "Source entity",
          "name": "Name",
          "standby_power": "Standby power"
        },
        "data_description": {
          "create_energy_sensor": "Whether powercalc needs to create a kWh sensor",
          "create_utility_meters": "Let powercalc create utility meters, which cycle daily, hourly etc.",
          "entity_id": "entity the virtual power is based on, the power sensor will listen to state changes of this entity to be updated",
          "name": "Leaving blank will take the name from the source entity",
          "standby_power": "Define the amount of power the device is consuming when in an OFF state"
        }
      },
      "daily_energy": {
        "title": "Daily energy options",
        "data": {
          "name": "Name",
          "on_time": "On time",
          "start_time": "Start time",
          "unit_of_measurement": "Unit of measurement",
          "update_frequency": "Update frequency",
          "value": "Value",
          "value_template": "Value template"
        },
        "data_description": {
          "on_time": "When left empty defaults to 1 day. always on",
          "update_frequency": "time in seconds between state updates of the sensor"
        }
      },
      "fixed": {
        "title": "Fixed options",
        "data": {
          "power": "Power",
          "power_template": "Power template",
          "self_usage_included": "Self usage included",
          "states_power": "States power"
        },
        "data_description": {
          "power": "A fixed power value in Watts when the entity is ON",
          "power_template": "Template will be evaluated to get the power value in W",
          "self_usage_included": "Whether the power value includes the power consumed by the smart switch itself.",
          "states_power": "One 'state: power' pair on each row, see example above"
        }
      },
      "global_configuration": {
        "title": "Basic options",
        "data": {
          "create_energy_sensors": "Create energy sensors",
          "create_utility_meters": "Create utility meters",
          "disable_extended_attributes": "Disable extended attributes",
          "disable_library_download": "Disable remote library download",
          "force_update_frequency": "Force update frequency",
          "ignore_unavailable_state": "Ignore unavailable state",
          "include_non_powercalc_sensors": "Include non powercalc sensors",
          "power_sensor_category": "Power sensor category",
          "power_sensor_friendly_naming": "Power sensor friendly name pattern",
          "power_sensor_naming": "Power sensor name pattern"
        },
        "data_description": {
          "create_energy_sensors": "Whether powercalc needs to create kWh sensors",
          "create_utility_meters": "Let powercalc create utility meters, which cycle daily, hourly etc.",
          "disable_extended_attributes": "Disable all extra attributes powercalc adds to the power, energy and group entity states. This will help keep the database size small",
          "disable_library_download": "Disable the Powercalc library download feature",
          "force_update_frequency": "Interval at which the sensor state is updated, even when the power value stays the same. In seconds",
          "ignore_unavailable_state": "Keep Powercalc sensors available, even when the source entity is unavailable",
          "include_non_powercalc_sensors": "Control whether you want to include non powercalc sensors in groups"
        }
      },
      "global_configuration_energy": {
        "title": "Energy options",
        "description": "Define the default settings for energy sensors here. See [documentation](https://docs.powercalc.nl/configuration/global-configuration/) for more information",
        "data": {
          "energy_integration_method": "Energy integration method",
          "energy_sensor_category": "Energy sensor category",
          "energy_sensor_friendly_naming": "Energy sensor friendly name pattern",
          "energy_sensor_naming": "Energy sensor name pattern",
          "energy_sensor_precision": "Energy sensor precision",
          "energy_sensor_unit_prefix": "Energy sensor unit prefix"
        }
      },
      "global_configuration_utility_meter": {
        "title": "Utility meter options",
        "description": "Define the default settings for utility meters here. See [documentation](https://docs.powercalc.nl/configuration/global-configuration/) for more information",
        "data": {
          "utility_meter_net_consumption": "Utility meter net consumption",
          "utility_meter_tariffs": "Utility meter tariffs",
          "utility_meter_types": "Utility meter types"
        }
      },
      "group": {
        "title": "Group options",
        "data": {
          "area": "Area",
          "device": "Device",
          "force_calculate_group_energy": "Force calculate energy",
          "group_energy_entities": "Additional energy entities",
          "group_member_sensors": "Member powercalc sensors",
          "group_power_entities": "Additional power entities",
          "hide_members": "Hide members",
          "include_non_powercalc_sensors": "Include non powercalc sensors",
          "sub_groups": "Sub groups"
        },
        "data_description": {
          "area": "Adds all power sensors from the specified area",
          "device": "Add the group entities powercalc creates to an existing device",
          "force_calculate_group_energy": "By default powercalc sums the energy sensors from the member sensors. Toggle this option to force creating a Riemann Sum sensor",
          "group_energy_entities": "Additional energy sensors (kWh) from your HA installation to include",
          "group_member_sensors": "Powercalc sensors to include in the group",
          "group_power_entities": "Additional power sensors (W) from your HA installation to include",
          "include_non_powercalc_sensors": "Control whether to include non powercalc sensors when using the area option",
          "sub_groups": "All containing sensors from the selected subgroups will be added to this group as well"
        }
      },
      "init": {
        "menu_options": {
          "advanced_options": "Advanced options",
          "basic_options": "Basic options",
          "daily_energy": "Daily energy options",
          "fixed": "Fixed options",
          "group": "Group options",
          "linear": "Linear options",
          "playbook": "Playbook options",
          "multi_switch": "Multi switch options",
          "real_power": "Real power options",
          "subtract_group": "Group options",
          "utility_meter_options": "Utility meter options",
          "wled": "WLED options"
        }
      },
      "library_options": {
        "title": "Library options",
        "description": "Currently the following library profile is selected: \n manufacturer: {manufacturer}\n model: {model}\n\nIf you want to change the profile, click next."
      },
      "linear": {
        "title": "Linear options",
        "data": {
          "attribute": "Attribute",
          "calibrate": "Calibration values",
          "gamma_curve": "Gamma curve",
          "max_power": "Max power",
          "min_power": "Min power"
        },
        "data_description": {
          "attribute": "Specify the attribute. When left empty will be brightness for lights and percentage for fans",
          "calibrate": "Put a calibration value on each line. Example\n\n1: 20"
        }
      },
      "multi_switch": {
        "title": "Multi switch options",
        "data": {
          "entities": "Switch entities",
          "power": "Power ON",
          "power_off": "Power OFF"
        },
        "data_description": {
          "entities": "Select all the individual switches that are part of the multi switch",
          "power": "Power for a single switch when turned on",
          "power_off": "Power for a single switch when turned off"
        }
      },
      "playbook": {
        "title": "Playbook options",
        "data": {
          "autostart": "Autostart",
          "playbooks": "Playbooks",
          "repeat": "Repeat",
          "states_trigger": "State trigger"
        },
        "data_description": {
          "autostart": "Indicate to start a certain playbook when HA starts. i.e. 'program1'",
          "playbooks": "Enter a playbook on each line. Example\n\nprogram1: washing_machine/program1.csv",
          "repeat": "Toggle when you want to keep repeating the playbook after it completes",
          "states_trigger": "Trigger a playbook based on a state change. Example\n\nplaying: program1"
        }
      },
      "real_power": {
        "title": "Real power options",
        "data": {
          "device": "Device"
        },
        "data_description": {
          "device": "Add the created energy sensor to an specific device"
        }
      },
      "subtract_group": {
        "data": {
          "entity_id": "Base entity",
          "subtract_entities": "Subtract entities"
        },
        "data_description": {
          "entity_id": "The base entity to subtract the power from",
          "subtract_entities": "Select all the entities you want to subtract from the base entity"
        },
        "title": "Group options"
      },
      "utility_meter_options": {
        "title": "Utility meter options",
        "data": {
          "utility_meter_net_consumption": "Net consumption",
          "utility_meter_types": "Cycles",
          "utility_meter_tariffs": "Tariffs"
        },
        "data_description": {
          "utility_meter_net_consumption": "Enable this if you would like to treat the source as a net meter. This will allow your counter to go both positive and negative.",
          "utility_meter_types": "Create utility meters for specified cycles",
          "utility_meter_tariffs": "A list of supported tariffs, leave empty if only a single tariff is needed."
        }
      },
      "wled": {
        "title": "WLED options",
        "data": {
          "power_factor": "Power factor",
          "voltage": "Voltage"
        }
      }
    }
  },
  "services": {
    "activate_playbook": {
      "description": "Start execution of a playbook.",
      "fields": {
        "playbook_id": {
          "description": "Playbook identifier.",
          "name": "Playbook"
        }
      },
      "name": "Activate playbook"
    },
    "calibrate_energy": {
      "description": "Sets the energy sensor to a given kWh value.",
      "fields": {
        "value": {
          "description": "The value to set.",
          "name": "Value"
        }
      },
      "name": "Calibrate energy sensor"
    },
    "calibrate_utility_meter": {
      "description": "Calibrates a utility meter sensor.",
      "fields": {
        "value": {
          "description": "The value to set.",
          "name": "Value"
        }
      },
      "name": "Calibrate utility meter"
    },
    "change_gui_config": {
      "description": "Batch change configuration of all Powercalc config entries",
      "fields": {
        "field": {
          "description": "The field you'd like to change",
          "name": "Value"
        },
        "value": {
          "description": "The value to set.",
          "name": "Value"
        }
      },
      "name": "Change GUI config"
    },
    "get_active_playbook": {
      "description": "Get current running playbook",
      "name": "Get active playbook"
    },
    "increase_daily_energy": {
      "description": "Increases the sensor with a given amount.",
      "fields": {
        "value": {
          "description": "Amount to add to the sensor.",
          "name": "Value"
        }
      },
      "name": "Increase daily energy sensor"
    },
    "reset_energy": {
      "description": "Reset an energy sensor to zero kWh.",
      "name": "Reset energy sensor"
    },
    "stop_playbook": {
      "description": "Stop currently active playbook.",
      "name": "Stop playbook"
    },
    "switch_sub_profile": {
      "description": "Some profiles in the library has different sub profiles. This service allows you to switch to another one.",
      "fields": {
        "profile": {
          "name": "Sub profile",
          "description": "Define one of the possible sub profiles"
        }
      },
      "name": "Switch to another sub profile"
    }
  }
}
